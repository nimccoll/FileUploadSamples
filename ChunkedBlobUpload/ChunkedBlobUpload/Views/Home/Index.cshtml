@*
//===============================================================================
// Microsoft Premier Support for Developers
// Azure Chunked Blob Upload Sample
//===============================================================================
// Copyright © Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
*@

<div class="container">
    <h3>Azure Blob Storage Large File Upload</h3>
    <p><input type="file" id="files" name="file" onclick="displayProcess(0)" /></p>
    <p><button id="upload-button" class="btn btn-primary" onclick="uploadBlobByStream(false)">Upload</button></p>
    <hr />
    <div>Upload Progress:<font id="read"> </font> </div>
    <div class="progress">
        <div id="progress" class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">
            0%
        </div>
    </div>
</div>

@section scripts {
    <!-- azure-storage.common.js also exports Node.js module stream, util and buffer -->
    <script src="~/Scripts/azure-storage.common.js"></script>
    <script src="~/Scripts/azure-storage.blob.js"></script>

    <script>
        // Provides a Stream for a file in webpage, inheriting from NodeJS Readable stream.
        var Stream = require('stream');
        var util = require('util');
        var Buffer = require('buffer').Buffer;

        function FileStream(file, opt) {
            Stream.Readable.call(this, opt);

            this.fileReader = new FileReader(file);
            this.file = file;
            this.size = file.size;
            this.chunkSize = 1024 * 1024 * 4; // 4MB
            this.offset = 0;
            var _me = this;

            this.fileReader.onloadend = function loaded(event) {
                var data = event.target.result;
                var buf = Buffer.from(data);
                _me.push(buf);
            }
        }
        util.inherits(FileStream, Stream.Readable);
        FileStream.prototype._read = function () {
            if (this.offset > this.size) {
                this.push(null);
            } else {
                var end = this.offset + this.chunkSize;
                var slice = this.file.slice(this.offset, end);
                this.fileReader.readAsArrayBuffer(slice);
                this.offset = end;
            }
        };
    </script>

    <script>
        var account = '@ViewBag.StorageAccount';
        var sas = '';
        var container = '@ViewBag.Container';
        var blobUri = '';
        var applicationUrl = '@Html.Raw(ViewBag.ApplicationUrl)';

        function checkParameters() {
            if (account == null || account.length < 1) {
                alert('Please enter a valid storage account name!');
                return false;
            }
            if (sas == null || sas.length < 1) {
                alert('Please enter a valid SAS Token!');
                return false;
            }

            return true;
        }

        function getBlobService() {
            if (!checkParameters())
                return null;

            blobUri = 'https://' + account + '.blob.core.windows.net';
            var blobService = AzureStorage.createBlobServiceWithSas(blobUri, sas).withFilter(new AzureStorage.ExponentialRetryPolicyFilter());
            return blobService;
        }

        function displayProcess(process) {
            document.getElementById("progress").style.width = process + '%';
            document.getElementById("progress").innerHTML = process + '%';
        }

        function uploadBlobByStream(checkMD5) {
            var files = document.getElementById('files').files;
            if (!files.length) {
                alert('Please select a file!');
                return;
            }
            var file = files[0];

            var blobService = getBlobService();
            if (!blobService)
                return;

            var btn = document.getElementById("upload-button");
            btn.disabled = true;
            btn.innerHTML = "Uploading...";

            var fileStream = new FileStream(file);

            // Make a smaller block size when uploading small blobs
            var blockSize = file.size > 1024 * 1024 * 32 ? 1024 * 1024 * 4 : 1024 * 512;
            var options = {
                storeBlobContentMD5: checkMD5,
                blockSize: blockSize
            };
            blobService.singleBlobPutThresholdInBytes = blockSize;

            var finishedOrError = false;
            var speedSummary = blobService.createBlockBlobFromStream(container, file.name, fileStream, file.size, options, function (error, result, response) {
                finishedOrError = true;
                btn.disabled = false;
                btn.innerHTML = "Upload";
                if (error) {
                    alert('Upload failed, open brower console for more detailed info.');
                    console.log(error);
                    displayProcess(0);
                } else {
                    displayProcess(100);
                    setTimeout(function () { // Prevent alert from stopping UI progress update
                        alert('Upload successful!');
                    }, 1000);
                }
            });

            function refreshProgress() {
                setTimeout(function () {
                    if (!finishedOrError) {
                        var process = speedSummary.getCompletePercent();
                        displayProcess(process);
                        refreshProgress();
                    }
                }, 200);
            }
            refreshProgress();
        }

        $(document).ready(function () {
            $.get((applicationUrl + 'home/getsas'), function (response) {
                console.log("GetSas Response: " + response);
                sas = response;
            }, "text");
        });
    </script>
}